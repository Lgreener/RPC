/*************************************************************

 * Generated by rocket framework rocket_generator.py
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
 * File Name: ${FILE_NAME}
 * Create Time: ${CREATE_TIME}
 * Allow Edit: True
*************************************************************/


#include <google/protobuf/service.h>
#include "rocket/net/rpc/rpc_channel.h"
#include "rocket/net/rpc/rpc_controller.h"
#include "rocket/net/rpc/rpc_closeure.h"
#include "rocket/common/log.h"
${INCLUDE_PB_HEADER}


void test_client(const std::string& addr) {

    NEWMESSAGE(${REQUEST_TYPE}, request);
    NEWMESSAGE(${RESPONSE_TYPE}, response);

    NEWRPCONROLLER(controller);
    controller->SetTimeout(2000);

    std::shared_ptr<rocket::RpcClosure> closure =
        std::make_shared<rocket::RpcClosure>([request, response, controller]() mutable {
            if (controller->GetErrorCode() == 0) {
                INFOLOG("call rpc success, request[%s], response[%s]", request->ShortDebugString().c_str(),
                        response->ShortDebugString().c_str());
            } else {
                ERRORLOG("call rpc failed,request[%s],error code[%d],error info[%s]", request->ShortDebugString().c_str(),
                         controller->GetErrorCode(), controller->GetErrorInfo().c_str());
            }
          exit(0);
        });

    CALLRCP(addr, ${STUBCLASS}, ${METHOD_NAME}, controller, request, response, closure)
}

int main(int argc, char* argv[]) {

  rocket::Config::SetGlobalConfig(NULL);
  
  rocket::Logger::InitGlobalLogger(0);
  
  std::string addr = std::string(argv[1])+":"+ std::string(argv[2]);

  test_client(addr);

  return 0;
}
